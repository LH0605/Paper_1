import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage.filters import gaussian_filter1d
# epsilons = [0, 0.1, 0.3, 0.5, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.3, 1.5, 1.7, 2.0] # linear loss
epsilons = [0, 1., 3., 4., 6., 8., 10., 12.] # poisson
# epsilons = [0, 1., 2., 3., 4., 5., 6., 8., 10., 12.]
# epsilons = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.5, 2.0, 2.5, 3.0] # gaussian

test_losses = [[0.00323011,0.00296525,0.0027386,0.00260757,0.00240618,0.0022701
,0.00201747,0.0021038,0.00192916,0.00195227,0.00186329,0.00186347
,0.00182519,0.00173483,0.0018497,0.00173357,0.00169505,0.00167356
,0.0016286,0.00163492,0.00161089,0.0015923,0.00164704,0.00157713
,0.00158093,0.0015799,0.00151785,0.00156352,0.00155631,0.00159408
,0.00156591,0.00152439,0.00157286,0.00157474,0.0015278,0.00151087
,0.00158444,0.00148989,0.00149791,0.00149246,0.00148538,0.0015064
,0.0014597,0.00149762,0.00150264,0.00148675,0.00148107,0.00150235
,0.00148465,0.00149919]
,[0.015944,0.00931018,0.00629385,0.00511444,0.00428923,0.00389016
,0.00335408,0.00305055,0.00266903,0.00242503,0.00232354,0.00215712
,0.00196239,0.00187642,0.00160726,0.00165599,0.0014725,0.0013887
,0.00129706,0.00126974,0.00125996,0.00118957,0.00111906,0.0009975
,0.0010164,0.00108401,0.0010073,0.0009207,0.00089762,0.00088304
,0.0008356,0.00082363,0.00075758,0.00079143,0.00074611,0.00070434
,0.00073677,0.00071439,0.00069139,0.0006564,0.0006583,0.00060777
,0.00063492,0.00066263,0.00059736,0.00057613,0.00059145,0.00056904
,0.0005558,0.00053186]
,[0.04241542,0.03114613,0.02184872,0.01640815,0.01346406,0.01060939
,0.00918056,0.00738984,0.00653088,0.00555517,0.00502782,0.00417098
,0.00409396,0.00344169,0.00316738,0.00288936,0.00293597,0.00246533
,0.0024246,0.00219586,0.00196038,0.00188402,0.00189049,0.00168844
,0.00165853,0.00149925,0.0014989,0.00141894,0.00139221,0.00123749
,0.00132529,0.00127533,0.00120323,0.0011064,0.00112252,0.00105034
,0.00103274,0.00096961,0.00096438,0.00095097,0.00087203,0.00087672
,0.00082903,0.00090434,0.0008235,0.00078441,0.00075465,0.00078515
,0.0006988,0.00070846]
,[0.06451412,0.05315199,0.04545911,0.03937165,0.03224681,0.02800989
,0.02484085,0.01948416,0.01665382,0.01561262,0.01223077,0.01238627
,0.0105189,0.00906999,0.00863913,0.00794006,0.00650305,0.00607472
,0.00548447,0.00592443,0.00508016,0.0047059,0.0042026,0.0038599
,0.00351148,0.00366634,0.00352596,0.00306993,0.00279702,0.00256811
,0.00255969,0.00242165,0.00243454,0.00218394,0.00215433,0.00217411
,0.00202453,0.00189677,0.00179951,0.00177488,0.00165378,0.00172485
,0.0016103,0.00149876,0.00141411,0.00142466,0.0014085,0.00127544
,0.00124413,0.00123615]
,[0.08718759,0.08195747,0.0717725,0.06381583,0.05903258,0.04984665
,0.04736656,0.04147118,0.03926738,0.03523237,0.03171496,0.02891558
,0.0286074,0.02591912,0.02296672,0.02382292,0.02025949,0.01943705
,0.01796316,0.01631157,0.01488852,0.01446807,0.01370333,0.0124985
,0.01172308,0.01083992,0.00960169,0.00921281,0.00866313,0.00920515
,0.00758463,0.00721201,0.00693861,0.00689901,0.00633416,0.00662841
,0.00574593,0.00523949,0.00508517,0.00531249,0.00515461,0.00494257
,0.00506374,0.00482716,0.00407986,0.00431191,0.00379036,0.00366993
,0.00356185,0.00353214]
,[0.1086764,0.10894308,0.1046681,0.09741745,0.09398241,0.0849299
,0.07890914,0.07629163,0.07539326,0.07146069,0.06904415,0.0633633
,0.06108657,0.05496696,0.05716939,0.05493713,0.05362507,0.05145129
,0.04545888,0.04583161,0.04417561,0.04271201,0.0401202,0.04042982
,0.03899859,0.03691293,0.03596704,0.03556781,0.03215258,0.03298713
,0.0300964,0.02915091,0.02916792,0.02882803,0.02730304,0.02727797
,0.02665121,0.02721241,0.02379221,0.02357822,0.02319517,0.02329594
,0.0221985,0.02134499,0.0197611,0.02011301,0.02083487,0.01938482
,0.01966023,0.01967293]
,[0.14082746,0.14787884,0.14419491,0.13973229,0.13845638,0.13188611
,0.13092469,0.12935408,0.12474177,0.12149249,0.11934473,0.11608069
,0.11776703,0.11587532,0.11056422,0.11065088,0.1127962,0.11151024
,0.10326722,0.10854205,0.10042725,0.09987918,0.10108627,0.09675443
,0.10059586,0.09165706,0.09411657,0.09423632,0.09305322,0.09137803
,0.09052934,0.088464,0.0875303,0.08928443,0.08560257,0.0873428
,0.08253879,0.08673332,0.08131423,0.08151867,0.0809341,0.08423779
,0.08010956,0.07835328,0.08344987,0.07846941,0.07639905,0.07960476
,0.08082988,0.07753128]
,[0.17417109,0.15896062,0.13719004,0.11228545,0.10403947,0.09682725
,0.09976289,0.09733032,0.09567987,0.09385065,0.09496581,0.09490193
,0.09518385,0.09473363,0.09492117,0.09494659,0.0956482,0.09519941
,0.09517725,0.09534432,0.09549038,0.09546335,0.0956106,0.09516495
,0.09538232,0.0951178,0.09576011,0.09543884,0.09559332,0.09559653
,0.09552234,0.09530699,0.09568666,0.09568745,0.09551395,0.09563254
,0.09531905,0.09527344,0.09569145,0.09579638,0.09537253,0.09571255
,0.09560569,0.09572794,0.09548533,0.09571204,0.09560387,0.09543337
,0.09551794,0.09570711]
,[0.1216638,0.10275401,0.09820105,0.09811504,0.09742075,0.09743847
,0.09736698,0.09750565,0.09757912,0.0974999,0.09751033,0.09753099
,0.09752972,0.09772673,0.09759545,0.0976601,0.09754233,0.09758237
,0.09758198,0.09755156,0.09759354,0.09752211,0.09764912,0.0975837
,0.09756353,0.0975148,0.09767789,0.09748721,0.09758195,0.09762327
,0.09755809,0.09750712,0.0975682,0.0975567,0.09756382,0.09763439
,0.09767783,0.09751437,0.09763311,0.09763996,0.09760219,0.09762088
,0.09760528,0.09761438,0.09772119,0.09769525,0.09765446,0.09760409
,0.09764751,0.09765342]
,[0.10340154,0.09817252,0.09818288,0.09818035,0.09827832,0.09827052
,0.09824701,0.09813435,0.09823421,0.09826272,0.09813266,0.09829605
,0.09825254,0.09825865,0.09824987,0.09827021,0.09827663,0.09820852
,0.09832699,0.09821181,0.09829755,0.09829324,0.09833625,0.09825688
,0.09824502,0.09822289,0.09822599,0.09827085,0.09831111,0.09826343
,0.09826758,0.09821003,0.09830965,0.09827582,0.09820745,0.09827515
,0.09834501,0.09831714,0.09831686,0.09825792,0.09827919,0.09825803
,0.09829556,0.09829228,0.09826411,0.09831538,0.09821703,0.09832632
,0.09822672,0.0982213]]

del(test_losses[5])
del(test_losses[6])

if len(epsilons) != len(test_losses):
    print(len(epsilons), len(test_losses))
    raise Exception("should be the same, check epsilons")
TRAIN_SIZE = len(test_losses[0])
train_sizes = np.arange(1, TRAIN_SIZE+1)

plt.title("Linreg 10D Poisson with OPT")
plt.xlabel("Size of Training Dataset")
plt.ylabel("Test Loss")
for i in range(len(epsilons)):
    print('eps:', epsilons[i])
    ysmoothed = gaussian_filter1d(test_losses[i], sigma=2)
    plt.plot(train_sizes, ysmoothed, label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="right")
plt.savefig(f"linreg_poisson_opt_10d.png")
plt.clf()

"""
# 1
plt.title("Linear Regression Gaussian")
plt.xlabel("Size of Training Dataset")
plt.ylabel("Test Loss")
for i in [1,2,3]: # range(len(epsilons)):
    print('eps:', epsilons[i])
    plt.plot(train_sizes, test_losses[i], label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="best")
plt.savefig(f"linreg_gaussian_fgsm_1d_weak.png")
plt.clf()

# 2
for i in [13, 14, 15, 16]:
    print('eps:', epsilons[i])
    plt.plot(train_sizes, test_losses[i], label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="best")
plt.savefig(f"linreg_gaussian_fgsm_1d_strong.png")
"""
