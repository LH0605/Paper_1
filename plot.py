import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage.filters import gaussian_filter1d
# epsilons = [0, 0.1, 0.3, 0.5, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.3, 1.5, 1.7, 2.0] # linear loss
# epsilons = [0, 1., 3., 4., 6., 8., 10., 12.] # poisson
# epsilons = [0, 1., 3., 4., 7., 8., 10., 12.] # poisson alt
# epsilons = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.5, 2.0, 2.5, 3.0] # gaussian
# epsilons = [0, 0.1, 0.2, 0.3, 0.7, 0.8, 0.9, 1.0, 1.5, 2.0] # gaussian reduced
# epsilons = [0, 0.4, 0.6, 0.8, 1.1, 1.3, 1.5, 2.0, 2.5, 3.0, 5.0, 7.0, 9.0, 12.0, 15.0] # rbf
epsilons = [0, 0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 7.0, 10.0]

test_losses = [[4.08435933,5.27120002,5.25661119,3.92822981,3.69232663,3.32426294
,3.43269515,2.38549908,2.70484205,2.91035056,3.14501937,3.0861733
,2.88413314,2.54493546,2.11997207,1.85102638,2.17522331,1.18083815
,2.55975298,2.65990039,1.98676054,2.1932896,1.5215377,1.65476827
,1.68646212,1.48023546,1.98386343,1.55842916,1.8112854,1.46380842]
,[4.27157116,3.85741544,3.44131374,3.95281617,3.52806075,2.64970283
,3.18844612,2.84510275,3.8541739,3.785182,3.83016857,3.91887522
,2.85246682,2.46159822,1.29278549,2.17648641,1.81907396,2.66751258
,2.0990082,2.04101209,3.04741303,2.77705999,3.00033339,1.45715102
,1.5832998,1.64285247,1.93338052,2.24593751,1.84874392,1.85409538]
,[3.88788009,5.38145638,4.6536506,3.65298088,3.03423715,4.02197202
,2.51125662,3.8759737,4.29765415,3.79979118,3.78202319,4.14667066
,4.37403933,3.10760212,2.91095467,3.79014762,3.24750113,3.58342489
,2.26452152,3.30085754,2.92170139,2.80681948,3.21046925,3.04254405
,3.00208334,2.91788268,3.85641829,2.70348247,2.7515955,2.62359826]
,[3.98481178,4.30012957,4.82815488,5.1450065,4.38867744,4.33438762
,4.66331649,4.10309919,3.9722565,3.63591909,4.43183422,4.31047742
,4.22616696,4.02574619,5.02240451,3.84054891,3.56986841,3.58969768
,4.12899303,4.25113352,3.69909326,3.39403665,4.46030307,3.90227071
,4.79995537,3.61044447,3.92764743,3.81679773,4.13019896,3.68522302]
,[3.49727527,4.15122191,4.42388089,4.54196485,4.81065559,5.00409063
,3.89653484,5.15572572,5.43880526,6.21845754,5.65172036,4.74320428
,5.16597207,5.56468232,4.96851285,6.14283005,4.88793262,6.05956189
,5.87689892,5.54402351,5.98464521,5.64558315,4.95929146,6.70422983
,6.36251767,6.40436904,6.15676371,6.20872879,6.83032099,6.01249647]
,[4.02067812,4.33457963,6.32062737,5.75321945,5.56166283,4.22965542
,3.73520374,6.53378582,7.06768195,7.45320654,6.36631044,6.63262399
,6.99395212,8.68357086,8.21097914,6.52815533,9.63647461,7.51424328
,8.29257822,6.5641772,6.04223077,6.87906726,7.44200452,7.47567352
,7.63670985,7.85041873,6.94566584,8.19590664,8.38651196,7.33299891]
,[3.80358942,4.44548432,4.55066919,4.03104663,7.3737545,6.81290515
,6.55330737,8.02150663,9.81348578,7.25829442,7.4832708,8.67142836
,8.89045159,8.81185802,8.60758575,7.97369909,10.31708304,8.34082556
,13.78671869,9.35317612,10.4619379,10.04756991,9.66854048,11.40444279
,9.52031612,12.35499509,8.9659907,10.85989952,11.86762524,11.44002978]
,[4.4525032,4.7711455,5.73990122,5.06503375,5.6019063,6.94770988
,7.21703339,4.84140921,6.50592041,7.03044383,8.67832788,7.39249881
,10.83890327,9.76613061,7.9511439,13.59122849,8.14755519,10.94022369
,10.77260574,9.83646234,11.05478636,14.95842997,11.63062255,12.11011569
,13.48376401,15.55664666,12.65429497,10.29057535,13.35379664,11.98347616]
,[3.93380006,4.46020031,4.33709876,4.52369595,4.64117702,4.8579189
,4.57393281,6.48213291,6.21013689,12.32775942,6.45883958,9.41500235
,7.74279976,7.19704199,6.47151581,6.50881402,5.59211524,10.04450448
,8.10698907,8.45129077,8.53974438,10.91507244,10.49768384,9.91081762
,6.45332193,7.72884337,11.64536222,9.39294704,10.75557454,8.93948968]
,[4.01981386,5.41795953,4.49894079,4.98458258,4.33649794,6.67135509
,4.36141141,4.72449795,5.37093894,6.04122925,5.6539286,6.06881793
,4.82872057,6.14917946,6.42572927,4.56667916,6.74673049,8.61308606
,6.09280189,14.36493238,12.09719547,5.42768653,8.34946235,6.82642953
,5.32354371,6.01806577,8.05823278,5.35381111,4.72809982,11.13390176]
,[3.85427213,4.4969457,4.33691216,4.33299303,4.33649397,4.33712053
,4.34903971,4.34200191,4.34014845,4.34187428,4.47839737,4.34490458
,4.39142402,4.35719585,4.35809183,4.33649445,6.73898649,4.36560297
,5.05508184,5.18278233,4.5175662,5.29802593,5.44171524,4.34598096
,7.33301036,4.54915587,4.83754937,4.58339198,4.7204423,4.78891913]]


if len(epsilons) != len(test_losses):
    print(len(epsilons), len(test_losses))
    raise Exception("should be the same, check epsilons")
TRAIN_SIZE = len(test_losses[0])
train_sizes = np.arange(2, TRAIN_SIZE+1)

plt.title("Linear Regression 10D Gaussian with FGSM")
plt.xlabel("Size of Training Dataset")
plt.ylabel("Test Loss")
for i in range(len(epsilons)):
    print('eps:', epsilons[i])
    ysmoothed = gaussian_filter1d(test_losses[i][1:], sigma=1)
    plt.plot(train_sizes, ysmoothed, label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="right")
plt.savefig(f"xxx.png")
plt.clf()

"""
# 1
plt.title("Linear Regression Gaussian")
plt.xlabel("Size of Training Dataset")
plt.ylabel("Test Loss")
for i in [1,2,3]: # range(len(epsilons)):
    print('eps:', epsilons[i])
    plt.plot(train_sizes, test_losses[i], label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="best")
plt.savefig(f"linreg_gaussian_fgsm_1d_weak.png")
plt.clf()

# 2
for i in [13, 14, 15, 16]:
    print('eps:', epsilons[i])
    plt.plot(train_sizes, test_losses[i], label=f"Ɛ = {epsilons[i]}")
plt.legend(loc="best")
plt.savefig(f"linreg_gaussian_fgsm_1d_strong.png")
"""
